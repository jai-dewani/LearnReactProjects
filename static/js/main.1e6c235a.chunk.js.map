{"version":3,"sources":["Components/metronome/click1.wav","Components/metronome/click2.wav","Components/Todo/Todos.js","Components/Todo/AddForm.js","Components/Todo/App.js","Components/metronome/Metronome.js","Components/Navbar/Navbar.js","Components/Home/Home.js","Components/MemeGenerator/Header.js","Components/MemeGenerator/Meme.js","Components/MemeGenerator/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todos","todos","deleteTodo","todoLists","length","map","todo","className","key","id","content","onClick","class","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","Metronome","handleBpmChnage","event","bpm","playing","clearInterval","timer","setInterval","playClick","count","startStop","beatsPermeasure","click2","play","click1","Audio","min","max","withRouter","href","to","Home","Header","src","alt","MemeGenerator","topText","bottomText","randomImg","allMemeImgs","bind","fetch","then","response","json","memes","data","name","randNum","floor","randMemeImg","url","placeholder","Meme","path","component","Todo","Mentronome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e6c235a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React from 'react';\nimport './Todo.css'\nconst Todos = ({todos, deleteTodo}) => {\n\tconst todoLists = todos.length ? (\n\t\ttodos.map(todo => {\n\t\t\treturn (\n\t\t\t\t<div className=\"todoItem\" key={todo.id}>\n\t\t\t\t\t<span className=\"todoText\" >{todo.content}</span>\n\t\t\t\t\t<div className=\"deleteTodo\">\n\t\t\t\t\t\t<i onClick={()=> {deleteTodo(todo.id)}} class=\"material-icons\">delete</i>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t})\n\t) : (\n\t\t<p className=\"center\">You have no todos's left, YAY!</p>\n\t)\n\treturn (\n\t\t<div className=\"todos collection\">\n\t\t\t{todoLists}\n\t\t</div>\n\t)\n}\n\nexport default Todos;","import React, {Component} from 'react';\nimport  './Todo.css';\n\nclass AddTodo extends Component{\n\tstate = {\n\t\tcontent: ''\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tcontent: e.target.value\n\t\t})\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.addTodo(this.state);\n\t\tthis.setState({\n\t\t\tcontent: ''\n\t\t})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<form className=\"todos addTodo\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<label>Add new todo: </label>\n\t\t\t\t\t<input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AddTodo","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodos from './AddForm';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {id: 1, content: 'buy some milk'},\n      {id: 2, content: 'play mario kart'}\n    ]\n  }\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id!==id;\n    });\n    this.setState({\n      todos\n    })\n  }\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos\n    }) \n  }\n  render(){\n    return (\n      <div className=\"todo-app container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n        <Todos todos={ this.state.todos } deleteTodo={ this.deleteTodo }/>\n        <AddTodos addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\n\nclass Metronome extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            playing: false,\n            count: 0,\n            bpm: 100,\n            beatsPermeasure: 4\n        };\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n    }\n\n    handleBpmChnage = event => {\n        const bpm = event.target.value;\n\n        if (this.state.playing) {\n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n            this.setState({\n                count: 0,\n                bpm\n            });\n        }else{\n            this.setState({bpm});\n        }\n    };\n\n    startStop = () => {\n        if (this.state.playing){\n            clearInterval(this.timer);\n            this.setState({\n                playing:false\n            });\n        }else{\n            this.timer = setInterval(\n                this.playClick,\n                (60 / this.state.bpm) * 1000\n            );\n            this.setState(\n                {\n                    count: 0,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    };\n    \n    playClick = () => {\n        const { count, beatsPermeasure } = this.state;\n\n        if (count%beatsPermeasure===0) {\n            this.click2.play();\n        } else {\n            this.click1.play();\n        }\n\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPermeasure\n        }));\n    };\n\n    render(){\n        const { playing, bpm } = this.state;\n        return(\n            <div className=\"metronome\">\n                <div className=\"bpm-slider\">\n                    <div>{bpm} BPM</div>\n                    <input type=\"range\" min=\"60\" max=\"240\" value={bpm} onChange={this.handleBpmChnage}/>\n                </div>\n                <button onClick={this.startStop}>\n                    {playing ? 'Stop' : 'Start'}\n                </button>\n            </div>\n        ) \n    }\n}\n\nexport default Metronome;","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst Navbar = (props) => {\n\treturn (\n\t\t<nav className=\"nav-wrapper red darken-3\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<a href=\"/\" className=\"brand-logo\">React Projects</a>\n\t\t\t\t<ul className=\"right\">\n\t\t\t\t\t<li><Link to=\"/todo\">Todo</Link></li>\n\t\t\t\t\t<li><Link to=\"/metronome\">Metronome</Link></li>\n\t\t\t\t\t<li><Link to=\"/meme\">Meme Generator</Link></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n\nexport default withRouter(Navbar)","import React from 'react';\n\nconst Home = () => {\n\treturn (\n\t\t<div className=\"center\">\n\t\t\t<h4>Welcome</h4>\n\t\t\t<h4>to My React Projects</h4>\n\t\t\t<h6>You can browse them using the Navbar</h6>\n\t\t\t<p>Notice it won't relod the page for you</p>\n\t\t</div>\n\t)\n}\n\nexport default Home;","import React from \"react\"\n\nfunction Header() {\n    return (\n        <header>\n            <img \n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \n                alt=\"Problem?\"\n            />\n            <p>Meme Generator</p>\n        </header>\n    )\n}\n\nexport default Header","import React, {Component} from \"react\"\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: []\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data\n                this.setState({ allMemeImgs: memes })\n            })\n    }\n    \n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({ [name]: value })\n    }\n    \n    handleSubmit(event) {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randMemeImg = this.state.allMemeImgs[randNum].url\n        this.setState({ randomImg: randMemeImg })\n    }\n    \n    render() {\n        return (\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    /> \n                    <input \n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    /> \n                \n                    <button>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img className=\"memeImage\" src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from 'react'\nimport Header from './Header'\nimport Meme from './Meme'\nimport './Meme.css'\n\nconst MemeGenerator= () => {\n    return ( \n        <div>\n            <Header />\n            <Meme />\n        </div>\n     )\n}\n \nexport default MemeGenerator;","import React, { Component } from 'react';\nimport Todo from './Components/Todo/App';\nimport Mentronome from './Components/metronome/Metronome';\nimport Navbar from './Components/Navbar/Navbar';\nimport Home from './Components/Home/Home';\nimport Meme from './Components/MemeGenerator';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n          <Route path=\"/todo\" component={Todo} />\n          <Route path=\"/metronome\" component={Mentronome} />\n          <Route path=\"/meme\" component={Meme} />\n          <Route path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}